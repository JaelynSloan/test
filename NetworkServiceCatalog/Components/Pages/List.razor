@page "/"
@inject ILocationRepository Repository
@using System.Net.NetworkInformation;

<PageTitle>Services</PageTitle>

<div class="row justify-content-center">
    <div class="col-10">
        <h3 class="header">Services</h3>
        @if (locations is null)
        {
            <div class="location-item">
                Loading services. Please wait...
            </div>
        }
        else if (locations.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Location Name</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var location in locations)
                    {
                        <tr>
                            <td>
                                <div class="location-info">
                                    <span class="location-name">@location.LocationName</span>
                                </div>
                            </td>
                            <td class="@(IsOnline(location.IpAddress) == "Online" ? "online-status" : "offline-status") status">
                                @IsOnline(location.IpAddress)
                                <div class="edit-container">
                                    <a href="@($"/edit/{location.Id}")" class="edit-btn btn btn-primary shadow-none">
                                        Edit
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="location-item">
                No Services Found
            </div>
        }
        <a href="/add-new" class="btn btn-primary shadow-none mb-3">
            Add New
        </a>
    </div>
</div>

@code {
    private List<Location>? locations;

    protected override async Task OnInitializedAsync()
    {
        locations = await Repository.GetAllAsync();
    }

    public static string IsOnline(string IpAddress)
    {
        string status = "Offline";
        Ping pinger = null;

        try
        {
            pinger = new Ping();
            PingReply reply = pinger.Send(IpAddress);
            if (reply.Status == IPStatus.Success)
            {
                status = "Online";
            }
        }
        catch (PingException)
        {
            // Discard PingExceptions and keep status as "Offline";
        }
        finally
        {
            if (pinger != null)
            {
                pinger.Dispose();
            }
        }

        return status;
    }

}
